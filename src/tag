#!/usr/bin/env python
#
# Copyright 2010 Markus Pielmeier
#
# This file is part of tagfs utils.
#
# tagfs utils is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# tagfs utils is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with tagfs utils.  If not, see <http://www.gnu.org/licenses/>.
#

import optparse
import os
import sys
from tag_utils import dom
from tag_utils import tag_io

class AppendCommand(object):

    def __init__(self):
        self.cmd = 'add'

    def execute(self, item, args):
        tagging = args[0]

        item.appendEntry(tag_io.parseLine(tagging))

        return 1

class SetCommand(object):

    def __init__(self):
        self.cmd = 'set';

    def execute(self, item, args):
        tagging = args[0]

        t = tag_io.parseLine(tagging)
        
        item.setContextValue(t.context, t.value)

        return 1

class ReadCommand(object):
    
    def __init__(self):
        self.cmd = 'read'

    def execute(self, item, args):
        context = args[0]

        for value in item.getContextValues(context):
            print value

        return 1

class ContextRenameCommand(object):
    
    def __init__(self):
        self.cmd = 'crename'

    def execute(self, item, args):
        oldName = args[0]
        newName = args[1]

        item.renameContext(oldName, newName)

        return 2

COMMANDS = {}

def addCommand(c):
    COMMANDS[c.cmd] = c

addCommand(AppendCommand())
addCommand(SetCommand())
addCommand(ReadCommand())
addCommand(ContextRenameCommand())

def parseItem(path):
    if os.path.isdir(path):
        return tag_io.parseDirectory(path)

    return tag_io.parseFile(path)

def writeItem(path, item):
    if os.path.isdir(path):
        tagFileName = os.path.join(path, '.tag')
    else:
        tagFileName = path

    tag_io.writeFile(item, tagFileName)

def main():
    usage = 'usage: %prog [options] target [commands]'
    parser = optparse.OptionParser()
    
    (options, args) = parser.parse_args()

    if len(args) == 0:
        parser.print_help()

        # TODO i should override OptionParser.print_help() but OptionParser
        # doesen't seem to be a new style class
        
        print ''
        print 'Supported commands:'
        for c in COMMANDS.itervalues():
            print '\t%s' % c.cmd

        return 1

    targetPath = args[0]
    commands = args[1:]

    item = parseItem(targetPath)

    i = 0
    while i < len(commands):
        cmd = commands[i]
        i = i + 1
        
        c = COMMANDS[cmd]

        i = i + c.execute(item, commands[i:])

    # TODO only write item when item is dirty
    writeItem(targetPath, item)

    return 0

if __name__ == '__main__':
    sys.exit(main())
